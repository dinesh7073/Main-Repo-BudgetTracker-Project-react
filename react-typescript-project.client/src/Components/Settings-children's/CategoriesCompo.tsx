import React, { useState } from 'react';
import { Input, Button, message, Col, Divider, Row, Spin, Table, Dropdown, Popconfirm, Space, Form, Modal, Select, Segmented } from 'antd';
import { Content } from 'antd/es/layout/layout';
import { Plus } from 'lucide-react';
import { EditOutlined, DeleteOutlined, MoreOutlined } from '@ant-design/icons';
import { Utils } from '../Common/Utilities/Utils';
import form from 'antd/es/form';

interface CategoriesType {
  id: string;
  userId: string;
  categoryName: string;    // this will taken from user
  categoryType: number | null;  // this will take from user
  categoryNumber: number | null;  // this will be generated by system default
}

const CategoriesCompo = () => {
  const [newCategory, setNewCategory] = useState('');
  const [loader, setLoader] = useState(false);
  const [editingCategory, seteditingCategory] = useState<CategoriesType | null | any>(null);
  const [form] = Form.useForm();
  const [isModalOpen, setIsModalOpen] = useState(false);

  const showModal = () => {
    form.setFieldsValue({});// we can override  any field values
    setIsModalOpen(true);
    seteditingCategory(null);
  };

  const handleCancel = () => {
    seteditingCategory(null);
    setIsModalOpen(false);
    form.resetFields();
  };

  const onFinish = (values: CategoriesType) => {
  }

  const columns = [
    {
      title: 'CategoryName',
      dataIndex: 'categoryName',
      key: 'categoryName',
      render: (text: any, categoryName: any) => (
        <span className='d-flex flex-row'>
          <span style={{ fontWeight: '500' }} >
            {categoryName.categoryName}
          </span>
        </span>
      ),
    },
    {
      title: 'CategoryType',
      dataIndex: 'categoryType',
      key: 'categoryType',
      render: (text: any, record: any) => <span> {record.categoryType}</span>
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (text: any, record: any) => (
        // <Space size="middle">
        //     <Button type="link" icon={<EditOutlined />} onClick={() => handleOpenModal(record)}>Edit</Button>
        //     <Button type="link" icon={<DeleteOutlined />} danger onClick={() => handleDelete((record.id), record)}>Delete</Button>
        // </Space>
        <Dropdown
          menu={{
            items: [
              {
                className: 'px-3',
                label: <span onClick={() => console.log('')
                } > <EditOutlined size={15} /> Edit</span>,
                key: '0',
              },
              {
                // label: <Popconfirm title="Are you sure?" onConfirm={() => handleDelete((record.id), record)}><span><DeleteOutlined size={15} /> Delete</span> </Popconfirm>,
                key: '1',
              },

            ],
          }}

          trigger={['click']}
        >
          <a className="text-dark fw-bold" onClick={(e) => e.preventDefault()}>
            <Space>
              <MoreOutlined size={20} />
            </Space>
          </a>
        </Dropdown >

        // </>    
      ),
    },
  ];

  return (
    <div>
      <Content style={{ backgroundColor: '#fff', height: '71vh' }}>

        <Row gutter={24}>

          {/* <Text strong>Add a new account</Text> */}
          {/* <Space.Compact className='w-25 mt-2'>  
        <Input placeholder='Account Name' onChange={(e) => setBankNameInput(e.target.value)} /> */}


          <Col span={5}>
            <Button type="primary" size='middle' className='m-0 px-2 py-3' onClick={showModal} > <Plus size={19} />Add Categories</Button>
          </Col>

          {/* </Space.Compact> */}

        </Row>
        <Divider />


        <h6> Your Categories</h6>
        <Spin spinning={loader} size="large" />
        <Table
          columns={columns}
          dataSource={[]}
          pagination={false}
          style={{ marginTop: '16px' }}
          scroll={{ y: 360 }}
          size='small'
          rowKey="key"
        />
      </Content>


      <Modal
        title="ADD CATEGORIES"
        open={isModalOpen}
        onCancel={handleCancel}
        footer={''}
      >
        <Form
          requiredMark={false}
          form={form}
          layout="vertical"
          onFinish={onFinish}
          initialValues={{}}
        >

          <Form.Item
            label="Category Type"
            name="categoryType"
            rules={[{ required: true, message: 'Please select a categoryType!' }]}


          >

            <Segmented size='middle' type='primary' options={[
              { label: 'Income', value: 1, },
              { label: 'Expense', value: 2, },
            ]}
              // onChange={handleTypeChange}
              // value={formData.transactionType}
              style={{ width: '100%', backgroundColor: '#F3F4FA', border: '1px solid lightgrey' }}
              block
            />

          </Form.Item>
          <Form.Item
            name="categoryName"
            label="Category Name"
            rules={[{ required: true, message: 'Please enter the category name!' }]}>
            <Input
              type='primary'
              onInput={(e: any) => e.target.value = e.target.value.length > 1 ? e.target.value : e.target.value.toUpperCase()}
              placeholder="Enter a category name"
            />
          </Form.Item>

          <Form.Item>
            <Button
              type="primary"
              htmlType="submit"
              style={{ width: '100%' }}
            >
              {editingCategory ? "Update" : "Save"}
            </Button>
          </Form.Item>


        </Form>
      </Modal>
    </div>
  );
}

export default CategoriesCompo;
